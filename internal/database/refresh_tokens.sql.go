// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refresh_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRefreshToken = `-- name: CreateRefreshToken :one
INSERT INTO refresh_tokens (
user_id, expires_at,
token  )
VALUES ( $1, $2, $3)
RETURNING id, user_id, token, expires_at, created_at
`

type CreateRefreshTokenParams struct {
	UserID    uuid.UUID
	ExpiresAt time.Time
	Token     string
}

func (q *Queries) CreateRefreshToken(ctx context.Context, arg CreateRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, createRefreshToken, arg.UserID, arg.ExpiresAt, arg.Token)
	var i RefreshToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.ExpiresAt,
		&i.CreatedAt,
	)
	return i, err
}

const refreshTokenExists = `-- name: RefreshTokenExists :one
SELECT EXISTS (
    SELECT 1
    FROM refresh_tokens
    WHERE token = $1
)
`

func (q *Queries) RefreshTokenExists(ctx context.Context, token string) (bool, error) {
	row := q.db.QueryRowContext(ctx, refreshTokenExists, token)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :exec
UPDATE refresh_tokens
SET 
  token = $1,
  expires_at = $2
WHERE user_id = $3
`

type UpdateRefreshTokenParams struct {
	Token     string
	ExpiresAt time.Time
	UserID    uuid.UUID
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, updateRefreshToken, arg.Token, arg.ExpiresAt, arg.UserID)
	return err
}
