// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: listings.sql

package database

import (
	"context"
	"database/sql"
	"encoding/json"

	"github.com/google/uuid"
)

const createListing = `-- name: CreateListing :one
INSERT INTO listings (
agent_id, title,
description, price,location,property_type_id,images, status  )
VALUES ( $1, $2, $3, $4, $5,$6,$7,$8)
RETURNING id, agent_id, title, description, price, location, latitude, longtitude, property_type_id, verified, images, status, created_at
`

type CreateListingParams struct {
	AgentID        uuid.UUID
	Title          string
	Description    string
	Price          int64
	Location       string
	PropertyTypeID uuid.UUID
	Images         json.RawMessage
	Status         string
}

func (q *Queries) CreateListing(ctx context.Context, arg CreateListingParams) (Listing, error) {
	row := q.db.QueryRowContext(ctx, createListing,
		arg.AgentID,
		arg.Title,
		arg.Description,
		arg.Price,
		arg.Location,
		arg.PropertyTypeID,
		arg.Images,
		arg.Status,
	)
	var i Listing
	err := row.Scan(
		&i.ID,
		&i.AgentID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.Location,
		&i.Latitude,
		&i.Longtitude,
		&i.PropertyTypeID,
		&i.Verified,
		&i.Images,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getListing = `-- name: GetListing :one
SELECT id, agent_id, title, description, price, location, latitude, longtitude, property_type_id, verified, images, status, created_at FROM listings WHERE $1=id
`

func (q *Queries) GetListing(ctx context.Context, id uuid.UUID) (Listing, error) {
	row := q.db.QueryRowContext(ctx, getListing, id)
	var i Listing
	err := row.Scan(
		&i.ID,
		&i.AgentID,
		&i.Title,
		&i.Description,
		&i.Price,
		&i.Location,
		&i.Latitude,
		&i.Longtitude,
		&i.PropertyTypeID,
		&i.Verified,
		&i.Images,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getListings = `-- name: GetListings :many
SELECT id, agent_id, title, description, price, location, latitude, longtitude, property_type_id, verified, images, status, created_at
FROM listings
WHERE
  (location = coalesce($1, location))
  AND (price >= coalesce($2::bigint, price))
  AND (price <= coalesce($3::bigint, price))
  AND (property_type_id = coalesce($4, property_type_id))
ORDER BY created_at DESC
LIMIT $6
OFFSET $5
`

type GetListingsParams struct {
	Location       sql.NullString
	MinPrice       sql.NullInt64
	MaxPrice       sql.NullInt64
	PropertyTypeID uuid.NullUUID
	Offset         int32
	Limit          int32
}

func (q *Queries) GetListings(ctx context.Context, arg GetListingsParams) ([]Listing, error) {
	rows, err := q.db.QueryContext(ctx, getListings,
		arg.Location,
		arg.MinPrice,
		arg.MaxPrice,
		arg.PropertyTypeID,
		arg.Offset,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.AgentID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Location,
			&i.Latitude,
			&i.Longtitude,
			&i.PropertyTypeID,
			&i.Verified,
			&i.Images,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
