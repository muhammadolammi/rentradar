// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: listings.sql

package database

import (
	"context"
	"database/sql"
)

const getListings = `-- name: GetListings :many
SELECT id, agent_id, title, description, rent_type, price, location, latitude, longtitude, type, verified, images, status, created_at
FROM listings
WHERE
  (location = coalesce($1, location) OR coalesce($1, location) IS NULL)
AND (price >= coalesce($2, min_price) OR coalesce($2, min_price) IS NULL)
AND (price<= coalesce($3, max_price) OR coalesce($3, max_price) IS NULL)
 AND (type = coalesce($4, type) OR coalesce($4, type) IS NULL)
ORDER BY created_at DESC
LIMIT $5
`

type GetListingsParams struct {
	Location sql.NullString
	MinPrice sql.NullString
	MaxPrice sql.NullString
	Type     sql.NullString
	Limit    int32
}

func (q *Queries) GetListings(ctx context.Context, arg GetListingsParams) ([]Listing, error) {
	rows, err := q.db.QueryContext(ctx, getListings,
		arg.Location,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Type,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Listing
	for rows.Next() {
		var i Listing
		if err := rows.Scan(
			&i.ID,
			&i.AgentID,
			&i.Title,
			&i.Description,
			&i.RentType,
			&i.Price,
			&i.Location,
			&i.Latitude,
			&i.Longtitude,
			&i.Type,
			&i.Verified,
			&i.Images,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
