// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: favorites.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFavorite = `-- name: CreateFavorite :one
INSERT INTO favorites (user_id, listing_id)
VALUES ($1, $2)
RETURNING id, user_id, listing_id
`

type CreateFavoriteParams struct {
	UserID    uuid.UUID
	ListingID uuid.UUID
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, createFavorite, arg.UserID, arg.ListingID)
	var i Favorite
	err := row.Scan(&i.ID, &i.UserID, &i.ListingID)
	return i, err
}

const getUserFavorites = `-- name: GetUserFavorites :many
SELECT id, user_id, listing_id FROM favorites WHERE user_id = $1
`

func (q *Queries) GetUserFavorites(ctx context.Context, userID uuid.UUID) ([]Favorite, error) {
	rows, err := q.db.QueryContext(ctx, getUserFavorites, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(&i.ID, &i.UserID, &i.ListingID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
