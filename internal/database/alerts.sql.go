// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: alerts.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAlert = `-- name: CreateAlert :one
INSERT INTO alerts (
user_id, min_price,max_price, location, property_type_id,contact_method )
VALUES ( $1, $2, $3, $4, $5,$6)
RETURNING id, user_id, min_price, max_price, location, property_type_id, contact_method
`

type CreateAlertParams struct {
	UserID         uuid.UUID
	MinPrice       int64
	MaxPrice       int64
	Location       string
	PropertyTypeID uuid.UUID
	ContactMethod  string
}

func (q *Queries) CreateAlert(ctx context.Context, arg CreateAlertParams) (Alert, error) {
	row := q.db.QueryRowContext(ctx, createAlert,
		arg.UserID,
		arg.MinPrice,
		arg.MaxPrice,
		arg.Location,
		arg.PropertyTypeID,
		arg.ContactMethod,
	)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Location,
		&i.PropertyTypeID,
		&i.ContactMethod,
	)
	return i, err
}

const getAlert = `-- name: GetAlert :one
SELECT id, user_id, min_price, max_price, location, property_type_id, contact_method FROM alerts WHERE $1=id
`

func (q *Queries) GetAlert(ctx context.Context, id uuid.UUID) (Alert, error) {
	row := q.db.QueryRowContext(ctx, getAlert, id)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Location,
		&i.PropertyTypeID,
		&i.ContactMethod,
	)
	return i, err
}

const getUserAlerts = `-- name: GetUserAlerts :many
SELECT id, user_id, min_price, max_price, location, property_type_id, contact_method FROM alerts WHERE $1=user_id
`

func (q *Queries) GetUserAlerts(ctx context.Context, userID uuid.UUID) ([]Alert, error) {
	rows, err := q.db.QueryContext(ctx, getUserAlerts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Alert
	for rows.Next() {
		var i Alert
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Location,
			&i.PropertyTypeID,
			&i.ContactMethod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
