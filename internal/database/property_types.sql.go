// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: property_types.sql

package database

import (
	"context"
)

const createPropertyType = `-- name: CreatePropertyType :one
INSERT INTO property_types (
name  )
VALUES ( $1)
RETURNING id, name
`

func (q *Queries) CreatePropertyType(ctx context.Context, name string) (PropertyType, error) {
	row := q.db.QueryRowContext(ctx, createPropertyType, name)
	var i PropertyType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPropertyTypeWithName = `-- name: GetPropertyTypeWithName :one
SELECT id, name FROM property_types WHERE $1=name
`

func (q *Queries) GetPropertyTypeWithName(ctx context.Context, name string) (PropertyType, error) {
	row := q.db.QueryRowContext(ctx, getPropertyTypeWithName, name)
	var i PropertyType
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getPropertyTypes = `-- name: GetPropertyTypes :many
SELECT id, name FROM property_types
`

func (q *Queries) GetPropertyTypes(ctx context.Context) ([]PropertyType, error) {
	rows, err := q.db.QueryContext(ctx, getPropertyTypes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []PropertyType
	for rows.Next() {
		var i PropertyType
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
