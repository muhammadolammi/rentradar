// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: agents.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (
user_id, company_name)
VALUES ( $1, $2)
RETURNING id, user_id, company_name, verified, rating
`

type CreateAgentParams struct {
	UserID      uuid.UUID
	CompanyName string
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (Agent, error) {
	row := q.db.QueryRowContext(ctx, createAgent, arg.UserID, arg.CompanyName)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyName,
		&i.Verified,
		&i.Rating,
	)
	return i, err
}

const getAgent = `-- name: GetAgent :one
SELECT id, user_id, company_name, verified, rating FROM agents WHERE $1=id
`

func (q *Queries) GetAgent(ctx context.Context, id uuid.UUID) (Agent, error) {
	row := q.db.QueryRowContext(ctx, getAgent, id)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyName,
		&i.Verified,
		&i.Rating,
	)
	return i, err
}

const getAgentWithUserId = `-- name: GetAgentWithUserId :one
SELECT id, user_id, company_name, verified, rating FROM agents WHERE $1=user_id
`

func (q *Queries) GetAgentWithUserId(ctx context.Context, userID uuid.UUID) (Agent, error) {
	row := q.db.QueryRowContext(ctx, getAgentWithUserId, userID)
	var i Agent
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CompanyName,
		&i.Verified,
		&i.Rating,
	)
	return i, err
}

const getAgents = `-- name: GetAgents :many
SELECT id, user_id, company_name, verified, rating FROM agents
`

func (q *Queries) GetAgents(ctx context.Context) ([]Agent, error) {
	rows, err := q.db.QueryContext(ctx, getAgents)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Agent
	for rows.Next() {
		var i Agent
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CompanyName,
			&i.Verified,
			&i.Rating,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
