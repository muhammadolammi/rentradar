// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: alerts.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const getAlert = `-- name: GetAlert :one


SELECT id, user_id, min_price, max_price, location, property_type, contact_method FROM alerts WHERE $1=id
`

// -- name: CreateAlert :one
// INSERT INTO alerts (
// user_id, min_price,max_price, location, property_type,contact_method )
// VALUES ( $1, $2, $3, $4, $5,$6)
// RETURNING *;
func (q *Queries) GetAlert(ctx context.Context, id uuid.UUID) (Alert, error) {
	row := q.db.QueryRowContext(ctx, getAlert, id)
	var i Alert
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.MinPrice,
		&i.MaxPrice,
		&i.Location,
		&i.PropertyType,
		&i.ContactMethod,
	)
	return i, err
}

const getAlertsForListing = `-- name: GetAlertsForListing :many
SELECT id, user_id, min_price, max_price, location, property_type, contact_method
FROM alerts
WHERE
  (location = $1  OR location = 'any')
  AND (property_type = $2  OR property_type = 'any')
  AND (min_price IS NULL OR min_price <= $3)
  AND (max_price IS NULL OR max_price >= $3)
`

type GetAlertsForListingParams struct {
	Location     string
	PropertyType string
	MinPrice     sql.NullInt64
}

func (q *Queries) GetAlertsForListing(ctx context.Context, arg GetAlertsForListingParams) ([]Alert, error) {
	rows, err := q.db.QueryContext(ctx, getAlertsForListing, arg.Location, arg.PropertyType, arg.MinPrice)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Alert
	for rows.Next() {
		var i Alert
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.MinPrice,
			&i.MaxPrice,
			&i.Location,
			&i.PropertyType,
			&i.ContactMethod,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
