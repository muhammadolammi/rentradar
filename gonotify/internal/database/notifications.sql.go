// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: notifications.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (
user_id,
sent_at, contact, contact_method, status  )
VALUES ( $1, $2, $3, $4, $5)
RETURNING id, user_id, sent_at, contact, contact_method, status, subject, body
`

type CreateNotificationParams struct {
	UserID        uuid.UUID
	SentAt        time.Time
	Contact       string
	ContactMethod string
	Status        string
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.UserID,
		arg.SentAt,
		arg.Contact,
		arg.ContactMethod,
		arg.Status,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SentAt,
		&i.Contact,
		&i.ContactMethod,
		&i.Status,
		&i.Subject,
		&i.Body,
	)
	return i, err
}

const getUnsentNotifications = `-- name: GetUnsentNotifications :many
SELECT id, user_id, sent_at, contact, contact_method, status, subject, body FROM notifications
WHERE status="pending"
`

func (q *Queries) GetUnsentNotifications(ctx context.Context) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getUnsentNotifications)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SentAt,
			&i.Contact,
			&i.ContactMethod,
			&i.Status,
			&i.Subject,
			&i.Body,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
